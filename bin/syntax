#!/usr/bin/env node

'use strict';

const fs = require('fs');

const options = require('nomnom')
  .script('syntax')
  .options({
    mode: {
      abbr: 'm',
      help: 'Parser mode: ll, lr0, slr1, lalr1',
      required: true,
    },
    grammar: {
      abbr: 'g',
      help: 'File containing LL or LR grammar',
      required: true,
    },
    table: {
      abbr: 't',
      help: 'Generate and output parsing table',
      flag: true,
    },
    collection: {
      abbr: 'c',
      help: 'Generate and output canonical collection of LR items',
      flag: true,
    },
    parse: {
      abbr: 'p',
      help: 'Parse a string and checks for acceptance',
    },
  })
  .parse();

/**
 * Set of parsers.
 */
const parsers = {
  lr0(options) {
    const Grammar = require('../dist/grammar/grammar').default;
    const grammar = new Grammar(this._readGrammar(options.grammar));

    // Canonical collection or LR items.
    if (options.collection) {
      const CanonicalCollection =
        require('../dist/lr/canonical-collection').default;

      new CanonicalCollection({grammar})
        .print();
    }

    // LR parsing table.
    if (options.table) {
      const CanonicalCollection =
        require('../dist/lr/canonical-collection').default;

      const LRParsingTable = require('../dist/lr/lr-parsing-table').default;

      new LRParsingTable({
        grammar,
        canonicalCollection: new CanonicalCollection({grammar}),
      }).print();
    }

    // Parse a string.
    if (options.parse) {
      const LRParser = require('../dist/lr/lr-parser').default;

      new LRParser({grammar})
        .parse(options.parse);
    }
  },

  _readGrammar(grammarFile) {
    const grammar = fs.readFileSync(grammarFile, 'utf-8');
    try {
      // An object with `lex`, and `bnf`.
      return JSON.parse(grammar);
    } catch (e) {
      // Just a bnf as a string.
      return grammar;
    }
  },
};

function main() {
  const mode = options.mode;

  if (!parsers.hasOwnProperty(mode)) {
    console.log(
      `${mode.toUpperCase()} is not implemented yet. ` +
      `Available parsers are: ${Object.keys(parsers).join(', ')}.`
    );
    return;
  }

  return parsers[mode](options);
}

if (require.main === module) {
    main();
}
