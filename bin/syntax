#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');
const vm = require('vm');

const GRAMMAR_MODE = require('../dist/grammar/grammar-mode').MODES;

const options = require('nomnom')
  .script('syntax')
  .options({
    mode: {
      abbr: 'm',
      help: `Parser mode: ${getModesList()}`,
      transform: normalizeMode,
    },
    grammar: {
      abbr: 'g',
      help: 'File containing LL or LR grammar',
      required: true,
    },
    table: {
      abbr: 't',
      help: 'Generate and output parsing table',
      flag: true,
    },
    collection: {
      abbr: 'c',
      help: 'Generate and output canonical collection of LR items',
      flag: true,
    },
    sets: {
      abbr: 's',
      help: 'Generate and output parsing sets (all/first/follow/predict)',
    },
    parse: {
      abbr: 'p',
      help: 'Parse a string and checks for acceptance',
      type: 'string',
    },
  })
  .parse();

/**
 * Set of parsers.
 */
const parsers = {
  LR0(options) {
    return this._genericLR(GRAMMAR_MODE.LR0, options);
  },

  SLR1(options) {
    return this._genericLR(GRAMMAR_MODE.SLR1, options);
  },

  _genericLR(mode, options) {
    console.log(`\nParsing mode: ${mode}.`);

    const grammar = getGrammar(options.grammar, mode);

    // Canonical collection or LR items.
    if (options.collection) {
      const CanonicalCollection =
        require('../dist/lr/canonical-collection').default;

      new CanonicalCollection({grammar})
        .print();
    }

    // LR parsing table.
    if (options.table) {
      const CanonicalCollection =
        require('../dist/lr/canonical-collection').default;

      const LRParsingTable = require('../dist/lr/lr-parsing-table').default;

      new LRParsingTable({
        grammar,
        canonicalCollection: new CanonicalCollection({grammar}),
      }).print();
    }

    // Parse a string.
    if (options.hasOwnProperty('parse')) {
      const LRParser = require('../dist/lr/lr-parser').default;

      new LRParser({grammar})
        .parse(options.parse);
    }
  },
};

const MULTI_LINE_COMMENTS_RE = /\/\*(.|\s)*?\*\//g;
const SINGLE_LINE_COMMENTS_RE = /\/\/.*?\n/g;

function getGrammar(grammarFile, mode) {
  const Grammar = require('../dist/grammar/grammar').default;

  let grammarData = fs.readFileSync(grammarFile, 'utf-8')
    .replace(MULTI_LINE_COMMENTS_RE, '')
    .replace(SINGLE_LINE_COMMENTS_RE, '');

  let grammar;

  try {
    // An object with `lex`, and `bnf`, valid JSON.
    grammar = JSON.parse(grammarData);
  } catch (e) {
    // JS code.
    try {
      grammar = vm.runInNewContext(`(${grammarData})`);
    } catch (e) {
      // Just a bnf as a string.
      grammar = {
        bnf: grammarData,
      };
    }
  }

  grammar.mode = mode;

  return new Grammar(grammar);
}

function normalizeMode(mode) {
  return mode.toUpperCase();
}

function getModesList() {
  return Object.keys(GRAMMAR_MODE).join(', ');
}

function extractMode(options) {
  let mode = options.mode;

  // If no explicit mode is passed, try
  // infer it from the grammar file extension.
  if (!mode) {
    mode = path.extname(options.grammar).slice(1);
  }

  if (!mode) {
    console.log(`\n"mode" option is required\n`);
    return null;
  }

  mode = normalizeMode(mode);

  if (!GRAMMAR_MODE.hasOwnProperty(mode)) {
    console.log(`\n"${mode}" is not a valid parsing mode. ` +
      `Valid modes are: ${getModesList()}.\n`
    );
    return null;
  }

  if (!parsers.hasOwnProperty(mode)) {
    let availableModes = Object.keys(parsers)
      .filter(mode => !mode.startsWith('_'))
      .join(', ');

    console.log(
      `\n"${mode}" is not implemented yet. ` +
      `Available parsers are: ${availableModes}.\n`
    );
    return null;
  }

  return mode;
}

function handleSets() {
  const SetsGenerator = require('../dist/sets-generator').default;

  let sets = options.sets;
  let sg = new SetsGenerator({grammar: getGrammar(options.grammar)});

  if (sets.indexOf('first') !== -1 || sets === 'all') {
    sg.printSet(sg.getFirstSets());
  }

  if (sets.indexOf('follow') !== -1 || sets === 'all') {
    sg.printSet(sg.getFollowSets());
  }

  if (sets.indexOf('predict') !== -1 || sets === 'all') {
    sg.printSet(sg.getPredictSets());
  }
}

function main() {
  const mode = extractMode(options);

  if (!mode) {
    return;
  }

  // Sets.
  if (options.sets) {
    handleSets();
  }

  parsers[mode](options);
}

if (require.main === module) {
    main();
}
