#!/usr/bin/env node

'use strict';

const colors = require('colors');
const fs = require('fs');
const path = require('path');
const vm = require('vm');

const GRAMMAR_MODE = require('../dist/grammar/grammar-mode').MODES;

const Grammar = require('../dist/grammar/grammar').default;
const LRParserGenerator = require('../dist/lr/lr-parser-generator').default;

const options = require('nomnom')
  .script('syntax')
  .options({
    mode: {
      abbr: 'm',
      help: `Parser mode: ${getModesList()}`,
      transform: normalizeMode,
    },
    grammar: {
      abbr: 'g',
      help: 'File containing LL or LR grammar',
      required: true,
      metavar: 'FILE'
    },
    table: {
      abbr: 't',
      help: 'Generate and output parsing table',
      flag: true,
    },
    collection: {
      abbr: 'c',
      help: 'Generate and output canonical collection of LR items',
      flag: true,
    },
    sets: {
      abbr: 's',
      help: 'Generate and output parsing sets (all/first/follow/predict)',
    },
    parse: {
      abbr: 'p',
      help: 'Parse a string and checks for acceptance',
      type: 'string',
    },
    file: {
      abbr: 'f',
      help: 'File to be parsed',
      type: 'string',
      metavar: 'FILE'
    },
    output: {
      abbr: 'o',
      help: 'Output file for a generated parser module',
      type: 'string',
      metavar: 'FILE'
    },
    'custom-tokenizer': {
      abbr: 'k',
      help: 'Path to a file with custom tokenizer class',
      type: 'string',
      metavar: 'FILE'
    },
    'ignore-whitespaces': {
      abbr: 'w',
      help: 'Adds a Lex rule to ignore whitespaces',
      flag: true,
    },
    'resolve-conflicts': {
      abbr: 'r',
      help: 'Whether to auto-resolve conflicts with default action',
      flag: true,
    },
  })
  .parse();

/**
 * Set of parsers.
 */
const parsers = {
  LR0(options) {
    return this._genericLR(GRAMMAR_MODE.LR0, options);
  },

  SLR1(options) {
    return this._genericLR(GRAMMAR_MODE.SLR1, options);
  },

  CLR1(options) {
    return this._genericLR(GRAMMAR_MODE.CLR1, options);
  },

  LALR1(options) {
    return this._genericLR(GRAMMAR_MODE.LALR1, options);
  },

  _genericLR(mode, options) {
    const grammar = getGrammar(options.grammar, mode);

    console.info(`\nParsing mode: ${grammar.getMode()}.`);

    // Canonical collection or LR items.
    if (options.collection) {
      const CanonicalCollection =
        require('../dist/lr/canonical-collection').default;

      new CanonicalCollection({grammar})
        .print();
    }

    // LR parsing table.
    if (options.table) {
      const CanonicalCollection =
        require('../dist/lr/canonical-collection').default;

      const LRParsingTable = require('../dist/lr/lr-parsing-table').default;

      new LRParsingTable({
        grammar,
        canonicalCollection: new CanonicalCollection({grammar}),
        resolveConflicts: options['resolve-conflicts'],
      }).print();
    }

    // Parse a string.
    if (options.hasOwnProperty('parse')) {
      parse(options.parse, grammar);
    }

    // Parse a file.
    if (options.hasOwnProperty('file')) {
      parse(fs.readFileSync(options.file, 'utf-8'), grammar);
    }

    // Generate parser module.
    if (options.output) {
      new LRParserGenerator({
        grammar,
        outputFile: options.output,
        customTokenizer: options['custom-tokenizer'],
        resolveConflicts: options['resolve-conflicts'],
      }).generate();

      console.info(
        `${colors.green('\n\u2713 Successfully generated:')}`,
        options.output, '\n'
      );
    }
  },
};

function parse(string, grammar) {
  console.info(`\n${colors.bold('Parsing:')}\n\n ${string}\n`);

  const LRParser = require('../dist/lr/lr-parser').default;

  try {
    const parsed = LRParser
      .fromParserGenerator({grammar})
      .parse(string);

    if (parsed.status === 'accept') {
      console.info(`${colors.green('\u2713 Accepted')}\n`);
    }

    if (parsed.hasOwnProperty('value')) {
      console.info(
        colors.bold('Parsed value:'), '\n\n',
        formatParsedOutput(parsed.value), '\n'
      );
    }

  } catch (e) {
    console.info(`${colors.red('Rejected: ' + e.message)}\n`);
    throw e;
  }
}

function formatParsedOutput(output) {
  if (Array.isArray(output) || output.constructor === Object) {
    return JSON.stringify(output, null, 2);
  }
  return output;
}

function getGrammar(grammarFile, mode) {
  let grammar = LRParserGenerator.loadGrammarData(grammarFile);

  if (options['ignore-whitespaces']) {
    if (!grammar.lex) {
      grammar.lex = {rules: []};
    }
    grammar.lex.rules.unshift(['\\s+', '/* skip whitespace */']);
  }

  grammar.mode = mode;

  return new Grammar(grammar);
}

function normalizeMode(mode) {
  return mode.toUpperCase();
}

function getModesList() {
  return Object.keys(GRAMMAR_MODE).join(', ');
}

function extractMode(options) {
  let mode = options.mode;

  // If no explicit mode is passed, try
  // infer it from the grammar file extension.
  if (!mode) {
    mode = path.extname(options.grammar).slice(1);
  }

  if (!mode) {
    console.error(`\n"mode" option is required\n`);
    return null;
  }

  mode = normalizeMode(mode);

  if (!GRAMMAR_MODE.hasOwnProperty(mode)) {
    console.log(`\n"${mode}" is not a valid parsing mode. ` +
      `Valid modes are: ${getModesList()}.\n`
    );
    return null;
  }

  if (!parsers.hasOwnProperty(mode)) {
    let availableModes = Object.keys(parsers)
      .filter(mode => !mode.startsWith('_'))
      .join(', ');

    console.error(
      `\n"${mode}" is not implemented yet. ` +
      `Available parsers are: ${availableModes}.\n`
    );
    return null;
  }

  return mode;
}

function handleSets() {
  const SetsGenerator = require('../dist/sets-generator').default;

  let sets = options.sets;
  let sg = new SetsGenerator({grammar: getGrammar(options.grammar)});

  if (sets.indexOf('first') !== -1 || sets === 'all') {
    sg.printSet(sg.getFirstSets());
  }

  if (sets.indexOf('follow') !== -1 || sets === 'all') {
    sg.printSet(sg.getFollowSets());
  }

  if (sets.indexOf('predict') !== -1 || sets === 'all') {
    sg.printSet(sg.getPredictSets());
  }
}

function main() {
  const mode = extractMode(options);

  if (!mode) {
    return;
  }

  // Sets.
  if (options.sets) {
    handleSets();
  }

  parsers[mode](options);
}

if (require.main === module) {
    main();
}
