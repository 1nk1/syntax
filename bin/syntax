#!/usr/bin/env node

'use strict';

const fs = require('fs');

const GRAMMAR_MODES = require('../dist/grammar/grammar').MODES;

const options = require('nomnom')
  .script('syntax')
  .options({
    mode: {
      abbr: 'm',
      help: 'Parser mode: ll, lr0, slr1, lalr1',
      required: true,
      transform(mode) {
        return mode.toUpperCase();
      },
      callback(mode) {
        mode = this.transform(mode);

        if (!GRAMMAR_MODES.hasOwnProperty(mode)) {
          return `\n"${mode}" is not a valid parsing mode. ` +
            `Valid modes are: ${Object.keys(GRAMMAR_MODES).join(', ')}.\n`;
        }
      }
    },
    grammar: {
      abbr: 'g',
      help: 'File containing LL or LR grammar',
      required: true,
    },
    table: {
      abbr: 't',
      help: 'Generate and output parsing table',
      flag: true,
    },
    collection: {
      abbr: 'c',
      help: 'Generate and output canonical collection of LR items',
      flag: true,
    },
    parse: {
      abbr: 'p',
      help: 'Parse a string and checks for acceptance',
    },
  })
  .parse();

/**
 * Set of parsers.
 */
const parsers = {
  LR0(options) {
    const grammar = this._getGrammar(options.grammar);

    // Canonical collection or LR items.
    if (options.collection) {
      const CanonicalCollection =
        require('../dist/lr/canonical-collection').default;

      new CanonicalCollection({grammar})
        .print();
    }

    // LR parsing table.
    if (options.table) {
      const CanonicalCollection =
        require('../dist/lr/canonical-collection').default;

      const LRParsingTable = require('../dist/lr/lr-parsing-table').default;

      new LRParsingTable({
        grammar,
        canonicalCollection: new CanonicalCollection({grammar}),
      }).print();
    }

    // Parse a string.
    if (options.parse) {
      const LRParser = require('../dist/lr/lr-parser').default;

      new LRParser({grammar})
        .parse(options.parse);
    }
  },

  _getGrammar(grammarFile) {
    const Grammar = require('../dist/grammar/grammar').default;

    let grammarData = fs.readFileSync(grammarFile, 'utf-8');
    let grammar;

    try {
      // An object with `lex`, and `bnf`.
      grammar = JSON.parse(grammar);
    } catch (e) {
      // Just a bnf as a string.
      grammar = grammarData;
    }

    return new Grammar(grammar, options.mode);
  },
};

function main() {
  const mode = options.mode;

  if (!parsers.hasOwnProperty(mode)) {
    let availableModes = Object.keys(parsers)
      .filter(mode => !mode.startsWith('_'))
      .join(', ');

    console.log(
      `\n"${mode}" is not implemented yet. ` +
      `Available parsers are: ${availableModes}.\n`
    );

    return;
  }

  return parsers[mode](options);
}

if (require.main === module) {
    main();
}
