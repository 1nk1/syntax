/**
 * Syntactic grammar for lexical grammar.
 *
 * The grammar is heavily based on the lexical grammar from Jison.
 * https://raw.githubusercontent.com/zaach/lex-parser/master/lex.y
 */

{
  start: `lex`,

  moduleInclude: `

    function encodeRE(string) {
      return string
        .replace(/([.*+?^$\\{\\}()|[\\]\\/\\\\])/g, '\\\\$1')
        .replace(/\\\\\\\\u([a-fA-F0-9]{4})/g,'\\\\u$1');
    }

    function prepareString(string) {
      // unescape slashes
      string = string.replace(/\\\\\\\\/g, '\\\\\');
      string = encodeRE(string);
      return string;
    }

  `,

  operators: [
    [`nonassoc`,  `/`, `/!`],
    [`left`,      `*`, `+`, `?`, `RANGE_REGEX`],
  ],

  bnf: {
    lex: [[`definitions %% rules epilogue`, `
      $$ = {rules: $rules};

      if ($definitions[0]) {
        $$.macros = $definitions[0];
      }

      if ($definitions[1]) {
        $$.startConditions = $definitions[1];
      }

      if ($epilogue && $epilogue.trim() !== '') {
        $$.moduleInclude = $epilogue;
      }

      if (yy.options) {
        $$.options = yy.options;
      }

      delete yy.options;
      delete yy.actionInclude;
    `]],

    epilogue:             [[`EOF`,                              `$$ = null`],
                           [`%% EOF`,                           `$$ = null`],
                           [`%% CODE EOF`,                      `$$ = $2`]],

    definitions:          [[`definition definitions`, `

      $$ = $definitions;

      if ('length' in $definition) {
        $$[0] = $$[0] || {};
        $$[0][$definition[0]] = $definition[1];
      } else {
        $$[1] = $$[1] || {};
        for (var name in $definition) {
          $$[1][name] = $definition[name];
        }
      }`],

     [`ε`,                                                      `$$ = [null, null]`]],

    definition:           [[`NAME regex`,                       `$$ = [$1, $2]`],
                           [`START_INC names_inclusive`,        `$$ = $2;`],
                           [`START_EXC names_exclusive`,        `$$ = $2`]],

    names_inclusive:      [[`START_COND`,                       `$$ = {}; $$[$1] = 0`],
                           [`names_inclusive START_COND`,       `$$ = $1; $$[$2] = 0`]],

    names_exclusive:      [[`START_COND`,                       `$$ = {}; $$[$1] = 1`],
                           [`names_exclusive START_COND`,       `$$ = $1; $$[$2] = 1`]],

    rules:                [[`rule`,                             `$$ = [$1];`],
                           [`rules rule`,                       `$$ = $1; $$.push($2)`]],

    rule:                 [[`start_conditions regex action`,    `$$ = $1 ? [$1, $2, $3] : [$2, $3]`]],

    action:               [[`{ action_body }`,                  `$$ = $2`],
                           [`ACTION`,                           `$$ = $1;`]],

    action_body:          [[`ε`,                                `$$ = ''`],
                           [`action_comments_body`,             `$$ = $1`],

                           [`action_body { action_body } action_comments_body`,
                                                                `$$ = $1 + $2 + $3 + $4 + $5`],

                           [`action_body { action_body }`,      `$$ = $1 + $2 + $3 + $4;`]],

    action_comments_body: [[`ACTION_BODY`,                      `$$ = yytext`],
                           [`action_comments_body ACTION_BODY`, `$$ = $1 + $2`]],

    start_conditions:     [[`< name_list >`,                    `$$ = $2`],
                           [`< * >`,                            `$$ = ['*']`],
                           [`ε`,                                ``]],

    name_list:            [[`NAME`,                             `$$ = [$1]`],
                           [`name_list , NAME`,                 `$$ = $1; $$.push($3)`]],

    regex:                [[`regex_list`,                       `$$ = $1;`]],

    regex_list:           [[`regex_list | regex_concat`,        `$$ = $1 + '|' + $3`],
                           [`regex_list |`,                     `$$ = $1 + '|'`],
                           [`regex_concat`,                     `$$ = $1`],
                           [`ε`,                                `$$ = ''`]],

    regex_concat:         [[`regex_concat regex_base`,          `$$ = $1 + $2`],
                           [`regex_base`,                       `$$ = $1`]],

    regex_base:           [[`( regex_list )`,                   `$$ = '(' + $2 + ')'`],
                           [`SPECIAL_GROUP regex_list )`,       `$$ = $1 + $2 + ')'`],
                           [`regex_base +`,                     `$$ = $1 + '+'`],
                           [`regex_base *`,                     `$$ = $1 + '*'`],
                           [`regex_base ?`,                     `$$ = $1 + '?'`],
                           [`/ regex_base`,                     `$$ = '(?=' + $2 + ')'`],
                           [`/! regex_base`,                    `$$ = '(?!' + $2 + ')'`],
                           [`name_expansion`,                   `$$ = $1`],
                           [`regex_base range_regex`,           `$$ = $1 + $2`],
                           [`any_group_regex`,                  `$$ = $1`],
                           [`.`,                                `$$ = '.'`],
                           [`^`,                                `$$ = '^'`],
                           [`$`,                                `$$ = '$'`],
                           [`string`,                           `$$ = $1`],
                           [`escape_char`,                      `$$ = $1`]],

    name_expansion:       [[`NAME_BRACE`,                       `$$ = $1`]],

    any_group_regex:      [[`ANY_GROUP_REGEX`,                  `$$ = yytext`]],

    escape_char:          [[`ESCAPE_CHAR`,                      `$$ = yytext`]],

    range_regex:          [[`RANGE_REGEX`,                      `$$ = yytext`]],

    string:               [[`STRING_LIT`,                       `$$ = prepareString(yytext.slice(1, -1))`],
                           [`CHARACTER_LIT`,                    `$$ = $1`]],
  },
}