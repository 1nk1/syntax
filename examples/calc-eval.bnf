/**
 * Precedence and assoc in Yacc format.
 *
 * See also in JSON grammar:
 *
 * https://github.com/DmitrySoshnikov/syntax/blob/master/examples/calc-eval.g
 *
 * To run this grammar:
 *
 *   ./bin/syntax -g examples/calc-eval.bnf -w -m slr1 -p '5 + 5 * 5'
 *
 *   > 30
 *
 *   ./bin/syntax -g examples/calc-eval.bnf -w -m slr1 -p '5 + 5 * -5'
 *
 *   > -20
 */

%lex

%%

\s+             /* skip whitespace */
\d+             return 'NUMBER'

/lex

%left '+' '-'
%left '*' '/'
%right '^'
%left UMINUS

%%

E
  : E '+' E     { $$ = $1 + $3 }
  | E '-' E     { $$ = $1 - $3 }
  | E '*' E     { $$ = $1 * $3 }
  | E '/' E     { $$ = $1 / $3 }
  | E '^' E     { $$ = Math.pow($1, $3) }
  | '-' E       %prec UMINUS { $$ = -$2 }
  | '(' E ')'   { $$ = $2 }
  | NUMBER      { $$ = Number($1) }
  ;