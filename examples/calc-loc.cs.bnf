/**
 * Captures location info. C# version.
 *
 * In order to capture locations, pass the `--loc` option.
 *
 * Locations in handlers are accessible via `@` notation, e.g. @1, @2, etc.
 * A named accessors are available as well: @foo, @bar.
 *
 * A location is an object of structure:
 *
 * {
 *   startOffset,
 *   endOffset,
 *   startLine,
 *   endLine,
 *   startColumn,
 *   endColum,
 * }
 *
 * The resulting location is in the @$. It is calculated automatically from
 * first and last symbol on a RHS handle, and it also can be overridden
 * manually.
 *
 * ./bin/syntax -g examples/calc-loc.php.bnf -m slr1 -o ~/Parser.php -w --loc
 *
 */

%{

namespace SyntaxParser {

public class BinaryExpression
{
    public object Left;
    public object Right;
    public string Op;
    public dynamic Loc;

    public BinaryExpression(dynamic op, object left, object right, dynamic loc)
    {
        Op = op.ToString();
        Left = left;
        Right = right;
        Loc = loc;
    }
}

public class Loc
{
    public Loc() {}

    public int StartOffset;
    public int EndOffset;
    public int StartLine;
    public int EndLine;
    public int StartColumn;
    public int EndColumn;

    // Same as default result location.
    public static Loc capture(dynamic start, dynamic end)
    {
        return new Loc()
        {
          StartOffset = start.StartOffset,
          EndOffset = end.EndOffset,
          StartLine = start.StartLine,
          EndLine = end.EndLine,
          StartColumn = start.StartColumn,
          EndColumn = end.EndColumn
        };
    }
}

public class NumericLiteral
{
    public int Value;
    public dynamic Loc;

    public NumericLiteral(dynamic value, dynamic loc)
    {
        Value = Convert.ToInt32(value);
        Loc = loc;
    }
}

}

%}

%left '+'
%left '*'

%%

exp
  : exp '+' exp
    /* Explicitly calculate location */
    { $$ = new BinaryExpression("+", $1, $3, Loc.capture(@1, @3)) }

  | exp '*' exp
    /* Use default result location: @$ */
    { $$ = new BinaryExpression("*", $1, $3, @$) }

  | '(' exp ')'
    { $$ = $2 }

  | number
    /* Named args and position */
    { $$ = new NumericLiteral($number, @number) }
  ;

literal
  : number
  ;

number
  : number digit
    { $$ = Convert.ToInt32($number.ToString() + $digit.ToString()); }

  | /* empty */ { $$ = ""; }
  ;

digit : '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
