/**
 * LR parser generated by the Syntax tool.
 *
 * To regenerate run:
 *
 *   ./bin/syntax \
 *     --grammar ~/path-to-grammar-file
 *     --mode <parsing-mode>
 *     --output ~/path-to-output-file.js
 *
 * In case of custom tokenizer, one may pass `--custom-tokenizer` option.
 */

'use strict';

<<MODULE_INCLUDE>>

let yytext;
let yyleng;
let $$;

const EOF = {
  toString() {
    return '$';
  }
};

const ps = <<PRODUCTIONS>>;
const tks = <<TOKENS>>;
const tbl = <<TABLE>>;

let s = [];

function unexpectedToken(token) {
  if (token.value === EOF) {
    unexpectedEndOfInput();
  }
  parseError(`Unexpected token: ${token.value}.`);
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new Error(`Parse error: ${message}`);
}

let tokenizer;
<<TOKENIZER>>

const LRParser = {
  parse(string) {
    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    s = [];

    s.push(0);

    let t = tokenizer.getNextToken();
    let st = null;

    do {
      if (!t) {
        unexpectedEndOfInput();
      }

      let sta = s[s.length - 1];
      let clm = tks[t.type];
      let e = tbl[sta][clm];
console.log('state', sta, 'clm', clm, 'e', e, 't.type', t.type);


      if (!e) {
        unexpectedToken(t);
      }

      if (e[0] === 's') {
        s.push(
          {symbol: t.type, semanticValue: t.value},
          Number(e.slice(1))
        );
        st = t;
        t = tokenizer.getNextToken();
      } else if (e[0] === 'r') {
        let pn = e.slice(1);
        let p = ps[pn];
        let hsa = typeof p[2] === 'function';
        let saa = hsa ? [] : null;

        if (p[1] !== 0) {
          let rhsl = p[1];
          while (rhsl--) {
            s.pop();
            let se = s.pop();

            if (hsa) {
              saa.unshift(se.semanticValue);
            }
          }
        }

        let rse = {symbol: p[0]};

        if (hsa) {
          yytext = st ? st.value : null;
          yyleng = st ? st.value.length : null;

          p[2](...saa);
          rse.semanticValue = $$;
        }

        s.push(
          rse,
          tbl[s[s.length - 1]][p[0]]
        );
      } else if (e === 'acc') {
        s.pop();
        let parsed = s.pop();

        if (s.length !== 1 ||
            s[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          unexpectedToken(t);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          return parsed.semanticValue;
        }

        return true;
      }

    } while (tokenizer.hasMoreTokens() || s.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return this;
  },

  getTokenizer() {
    return tokenizer;
  },

};

module.exports = LRParser;
