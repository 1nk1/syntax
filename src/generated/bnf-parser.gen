/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */

'use strict';

let yytext;
let yyleng;
let $$;

const EOF = {
  toString() {
    return '$';
  }
};

const ps = [[-1, 1],
[0, 3, ($1,$2,$3) => { 
                      const spec = Object.assign({bnf: $3}, extra);

                      if (operators.length) {
                        spec.operators = operators;
                      }

                      if (tokens.length) {
                        spec.tokens = tokens.join(' ');
                      }

                      $$ = spec;
                     }],
[1, 1],
[1, 0],
[2, 1],
[2, 2],
[3, 1, ($1) => { extra.moduleInclude = $1 }],
[3, 2, ($1,$2) => { extra.start = $2 }],
[3, 2, ($1,$2) => { operators.push(['left'].concat($2)) }],
[3, 2, ($1,$2) => { operators.push(['right'].concat($2)) }],
[3, 2, ($1,$2) => { operators.push(['nonassoc'].concat($2)) }],
[3, 2, ($1,$2) => { tokens.push($2) }],
[4, 1, ($1) => { $$ = [$1] }],
[4, 2, ($1,$2) => { $$ = $1; $1.push($2) }],
[5, 2, ($1,$2) => { $$ = $1; $$[$2[0]] = $2[1] }],
[5, 1, ($1) => { $$ = {}; $$[$1[0]] = $1[1] }],
[6, 4, ($1,$2,$3,$4) => { $$ = [$1, $3] }],
[7, 1, ($1) => { $$ = $1 }],
[8, 3, ($1,$2,$3) => { $$ = $1; $1.push($3) }],
[8, 1, ($1) => { $$ = [$1] }],
[9, 2, ($1,$2) => { $$ = [$1[0], $2]; $1[1] && $$.push({prec: $1[1]}) }],
[10, 2, ($1,$2) => { $$ = [$1, $2] }],
[10, 0, () => { $$ = '' }],
[11, 2, ($1,$2) => { $$ = $2 }],
[11, 0],
[12, 2, ($1,$2) => { $$ = $1 + ' ' + $2 }],
[12, 1, ($1) => { $$ = $1 }],
[13, 1, ($1) => { $$ = $1 }],
[13, 1, ($1) => { $$ = $1 }],
[14, 1, ($1) => { $$ = $1 }],
[14, 1, ($1) => { $$ = $1 }],
[15, 1, ($1) => { $$ = $1.slice(1, -1) }],
[16, 1, ($1) => { $$ = $1 }],
[16, 0, () => { $$ = null }]];
const tks = {"%%":17,"MODULE_INCLUDE":18,"%start":19,"%left":20,"%right":21,"%nonassoc":22,"%token":23,"ID":24,"SPLITTER":25,";":26,"|":27,"%prec":28,"STRING":29,"CODE":30,"$":31};
const tbl = {"0":{"0":43,"1":1,"2":2,"3":3,"17":"r3","18":"s4","19":"s5","20":"s6","21":"s7","22":"s8","23":"s9"},"1":{"17":"s10"},"2":{"3":32,"17":"r2","18":"s4","19":"s5","20":"s6","21":"s7","22":"s8","23":"s9"},"3":{"17":"r4","18":"r4","19":"r4","20":"r4","21":"r4","22":"r4","23":"r4"},"4":{"17":"r6","18":"r6","19":"r6","20":"r6","21":"r6","22":"r6","23":"r6"},"5":{"7":33,"24":"s44"},"6":{"4":34,"14":35,"15":37,"24":"s36","29":"s38"},"7":{"4":40,"14":35,"15":37,"24":"s36","29":"s38"},"8":{"4":41,"14":35,"15":37,"24":"s36","29":"s38"},"9":{"24":"s42"},"10":{"5":11,"6":12,"7":13,"24":"s44"},"11":{"6":14,"7":13,"24":"s44","31":"r1"},"12":{"24":"r15","31":"r15"},"13":{"25":"s15"},"14":{"24":"r14","31":"r14"},"15":{"8":16,"9":17,"10":18,"12":19,"13":20,"24":"s21","26":"r22","27":"r22","29":"s22","30":"r22"},"16":{"26":"s23","27":"s24"},"17":{"26":"r19","27":"r19"},"18":{"16":26,"26":"r33","27":"r33","30":"s27"},"19":{"11":28,"13":29,"24":"s21","26":"r24","27":"r24","28":"s30","29":"s22","30":"r24"},"20":{"24":"r26","26":"r26","27":"r26","28":"r26","29":"r26","30":"r26"},"21":{"24":"r27","26":"r27","27":"r27","28":"r27","29":"r27","30":"r27"},"22":{"24":"r28","26":"r28","27":"r28","28":"r28","29":"r28","30":"r28"},"23":{"24":"r16","31":"r16"},"24":{"9":25,"10":18,"12":19,"13":20,"24":"s21","26":"r22","27":"r22","29":"s22","30":"r22"},"25":{"26":"r18","27":"r18"},"26":{"26":"r20","27":"r20"},"27":{"26":"r32","27":"r32"},"28":{"26":"r21","27":"r21","30":"r21"},"29":{"24":"r25","26":"r25","27":"r25","28":"r25","29":"r25","30":"r25"},"30":{"13":31,"24":"s21","29":"s22"},"31":{"26":"r23","27":"r23","30":"r23"},"32":{"17":"r5","18":"r5","19":"r5","20":"r5","21":"r5","22":"r5","23":"r5"},"33":{"17":"r7","18":"r7","19":"r7","20":"r7","21":"r7","22":"r7","23":"r7"},"34":{"14":39,"15":37,"17":"r8","18":"r8","19":"r8","20":"r8","21":"r8","22":"r8","23":"r8","24":"s36","29":"s38"},"35":{"17":"r12","18":"r12","19":"r12","20":"r12","21":"r12","22":"r12","23":"r12","24":"r12","29":"r12"},"36":{"17":"r29","18":"r29","19":"r29","20":"r29","21":"r29","22":"r29","23":"r29","24":"r29","29":"r29"},"37":{"17":"r30","18":"r30","19":"r30","20":"r30","21":"r30","22":"r30","23":"r30","24":"r30","29":"r30"},"38":{"17":"r31","18":"r31","19":"r31","20":"r31","21":"r31","22":"r31","23":"r31","24":"r31","29":"r31"},"39":{"17":"r13","18":"r13","19":"r13","20":"r13","21":"r13","22":"r13","23":"r13","24":"r13","29":"r13"},"40":{"14":39,"15":37,"17":"r9","18":"r9","19":"r9","20":"r9","21":"r9","22":"r9","23":"r9","24":"s36","29":"s38"},"41":{"14":39,"15":37,"17":"r10","18":"r10","19":"r10","20":"r10","21":"r10","22":"r10","23":"r10","24":"s36","29":"s38"},"42":{"17":"r11","18":"r11","19":"r11","20":"r11","21":"r11","22":"r11","23":"r11"},"43":{"31":"acc"},"44":{"17":"r17","18":"r17","19":"r17","20":"r17","21":"r17","22":"r17","23":"r17","25":"r17"}};

const s = [];

let tokenizer;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

const lexRules = [[/^\/\*(.|\s)*?\*\//, () => { /* skip comments */ }],
[/^\s+/, () => { /* skip whitespace */ }],
[/^%start/, () => { return '%start' }],
[/^%prec/, () => { return '%prec' }],
[/^%left/, () => { return '%left' }],
[/^%right/, () => { return '%right' }],
[/^%nonassoc/, () => { return '%nonassoc' }],
[/^%token/, () => { return '%token' }],
[/^%lex[wW]*?\/lex/, () => { return 'LEX_BLOCK' }],
[/^%\{(.|\r|\n)*?%\}/, () => { yytext = yytext.slice(2, -2).trim(); return 'MODULE_INCLUDE' }],
[/^\{\s*(.*)\s*\}/, () => { yytext = yytext.slice(1, -1).trim(); return 'CODE' }],
[/^[a-zA-Z][a-zA-Z0-9_-]*/, () => { return 'ID' }],
[/^(?:->|:)/, () => { return 'SPLITTER' }],
[/^;/, () => { return ';' }],
[/^\|/, () => { return '|' }],
[/^\{/, () => { return '{' }],
[/^\}/, () => { return '}' }],
[/^%%/, () => { return '%%' }],
[/^%[a-zA-Z]+[^\r\n]*/, () => { /* skip unrecognized options */ }],
[/^(?:"|')([^"']*)(?:"|')/, () => { return 'STRING' }]];

tokenizer = {
  initString(string) {
    this._string = string + EOF;
    this._cursor = 0;
    return this;
  },

  getNextToken() {
    if (!this.hasMoreTokens()) {
      return {
        type: EOF,
        value: EOF,
      };
    } else if (this.isEOF()) {
      this._cursor++;
      return {
        type: EOF,
        value: EOF,
      };
    }

    let string = this._string.slice(this._cursor);

    for (let i = 0; i < lexRules.length; i++) {
      let lexRule = lexRules[i];
      let matched = this._match(string, lexRule[0]);
      if (matched) {
        yytext = matched;
        yyleng = yytext.length;
        let token = lexRule[1]();

        if (!token) {
          return this.getNextToken();
        }

        return {
          type: token,
          value: yytext,
        };
      }
    }

    throw new Error(`Unexpected token: "${string[0]}".`);
  },

  isEOF() {
    return this._string[this._cursor] === EOF.toString() &&
      this._cursor === this._string.length - 1;
  },

  hasMoreTokens() {
    return this._cursor < this._string.length;
  },

  _match(string, regexp) {
    let matched = string.match(regexp);
    if (matched) {
      this._cursor += matched[0].length;
      return matched[0];
    }
    return null;
  },
};

const yyparse = {
  parse(string) {
    yyparse.onParseBegin(string);

    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    s.length = 0;
    s.push(0);

    let t = tokenizer.getNextToken();
    let st = null;

    do {
      if (!t) {
        unexpectedEndOfInput();
      }

      let sta = s[s.length - 1];
      let clm = tks[t.type];
      let e = tbl[sta][clm];

      if (!e) {
        unexpectedToken(t);
      }

      if (e[0] === 's') {
        s.push(
          {symbol: t.type, semanticValue: t.value},
          Number(e.slice(1))
        );
        st = t;
        t = tokenizer.getNextToken();
      } else if (e[0] === 'r') {
        let pn = e.slice(1);
        let p = ps[pn];
        let hsa = typeof p[2] === 'function';
        let saa = hsa ? [] : null;

        if (p[1] !== 0) {
          let rhsl = p[1];
          while (rhsl--) {
            s.pop();
            let se = s.pop();

            if (hsa) {
              saa.unshift(se.semanticValue);
            }
          }
        }

        let rse = {symbol: p[0]};

        if (hsa) {
          yytext = st ? st.value : null;
          yyleng = st ? st.value.length : null;

          p[2](...saa);
          rse.semanticValue = $$;
        }

        s.push(
          rse,
          tbl[s[s.length - 1]][p[0]]
        );
      } else if (e === 'acc') {
        s.pop();
        let parsed = s.pop();

        if (s.length !== 1 ||
            s[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          unexpectedToken(t);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          yyparse.onParseEnd(parsed.semanticValue);
          return parsed.semanticValue;
        }

        yyparse.onParseEnd();
        return true;
      }

    } while (tokenizer.hasMoreTokens() || s.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return yyparse;
  },

  getTokenizer() {
    return tokenizer;
  },

  onParseBegin(string) {},
  onParseEnd(parsed) {},
};


    let tokens;
    let operators;
    let extra;

    yyparse.onParseBegin = () => {
    tokens = [];
    operators = [];
    extra = {};
    };
  

function unexpectedToken(token) {
  if (token.value === EOF) {
    unexpectedEndOfInput();
  }
  parseError(`Unexpected token: ${token.value}.`);
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new Error(`Parse error: ${message}`);
}

module.exports = yyparse;
