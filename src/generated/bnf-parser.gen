/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */

'use strict';

let yytext;
let yyleng;
let yy = {};
let __;

const EOF = '$';

const ps = [[-1, 1],
[0, 3, (_1,_2,_3) => { 
                      const spec = Object.assign({bnf: _3}, extra);

                      if (operators.length) {
                        spec.operators = operators;
                      }

                      if (tokens.length) {
                        spec.tokens = tokens.join(' ');
                      }

                      __ = spec;
                     }],
[1, 1],
[1, 0],
[2, 1],
[2, 2],
[3, 1, (_1) => { extra.lex = _1 }],
[3, 1, (_1) => { extra.moduleInclude = _1 }],
[3, 2, (_1,_2) => { extra.start = _2 }],
[3, 2, (_1,_2) => { operators.push(['left'].concat(_2)) }],
[3, 2, (_1,_2) => { operators.push(['right'].concat(_2)) }],
[3, 2, (_1,_2) => { operators.push(['nonassoc'].concat(_2)) }],
[3, 2, (_1,_2) => { tokens.push(..._2) }],
[4, 1, (_1) => { __ = [_1] }],
[4, 2, (_1,_2) => { __ = _1; _1.push(_2) }],
[5, 2, (_1,_2) => { __ = _1; __[_2[0]] = _2[1] }],
[5, 1, (_1) => { __ = {}; __[_1[0]] = _1[1] }],
[6, 4, (_1,_2,_3,_4) => { __ = [_1, _3] }],
[7, 1, (_1) => { __ = _1 }],
[8, 3, (_1,_2,_3) => { __ = _1; _1.push(_3) }],
[8, 1, (_1) => { __ = [_1] }],
[9, 2, (_1,_2) => { __ = [_1[0], _2]; _1[1] && __.push({prec: _1[1]}) }],
[10, 2, (_1,_2) => { __ = [_1, _2] }],
[10, 0, () => { __ = '' }],
[11, 2, (_1,_2) => { __ = _2 }],
[11, 0],
[12, 2, (_1,_2) => { __ = _1 + ' ' + _2 }],
[12, 1, (_1) => { __ = _1 }],
[13, 1, (_1) => { __ = _1 }],
[13, 1, (_1) => { __ = _1 }],
[14, 3, (_1,_2,_3) => { __ = _2 }],
[14, 0, () => { __ = null }],
[15, 1, (_1) => { __ = _1 }],
[15, 5, (_1,_2,_3,_4,_5) => { __ = _1 + _2 + _3 + _4 + _5 }],
[15, 4, (_1,_2,_3,_4) => { __ = _1 + _2 + _3 + _4 }],
[15, 0, () => { __ = '' }],
[16, 2, (_1,_2) => { __ = _1 + _2 }],
[16, 1, (_1) => { __ = _1 }]];
const tks = {"%%":"17","LEX_BLOCK":"18","MODULE_INCLUDE":"19","%start":"20","%left":"21","%right":"22","%nonassoc":"23","%token":"24","SPLITTER":"25",";":"26","ID":"27","|":"28","%prec":"29","STRING":"30","{":"31","}":"32","CODE":"33","$":"34"};
const tbl = {"0":{"0":50,"1":1,"2":2,"3":3,"17":"r3","18":"s4","19":"s5","20":"s6","21":"s7","22":"s8","23":"s9","24":"s10"},"1":{"17":"s11"},"2":{"3":42,"17":"r2","18":"s4","19":"s5","20":"s6","21":"s7","22":"s8","23":"s9","24":"s10"},"3":{"17":"r4","18":"r4","19":"r4","20":"r4","21":"r4","22":"r4","23":"r4","24":"r4"},"4":{"17":"r6","18":"r6","19":"r6","20":"r6","21":"r6","22":"r6","23":"r6","24":"r6"},"5":{"17":"r7","18":"r7","19":"r7","20":"r7","21":"r7","22":"r7","23":"r7","24":"r7"},"6":{"7":43,"27":"s51"},"7":{"4":44,"13":45,"27":"s22","30":"s23"},"8":{"4":47,"13":45,"27":"s22","30":"s23"},"9":{"4":48,"13":45,"27":"s22","30":"s23"},"10":{"4":49,"13":45,"27":"s22","30":"s23"},"11":{"5":12,"6":13,"7":14,"27":"s51"},"12":{"6":15,"7":14,"27":"s51","34":"r1"},"13":{"27":"r16","34":"r16"},"14":{"25":"s16"},"15":{"27":"r15","34":"r15"},"16":{"8":17,"9":18,"10":19,"12":20,"13":21,"26":"r23","27":"s22","28":"r23","30":"s23","31":"r23"},"17":{"26":"s24","28":"s25"},"18":{"26":"r20","28":"r20"},"19":{"14":27,"26":"r31","28":"r31","31":"s28"},"20":{"11":38,"13":39,"26":"r25","27":"s22","28":"r25","29":"s40","30":"s23","31":"r25"},"21":{"26":"r27","27":"r27","28":"r27","29":"r27","30":"r27","31":"r27"},"22":{"17":"r28","18":"r28","19":"r28","20":"r28","21":"r28","22":"r28","23":"r28","24":"r28","26":"r28","27":"r28","28":"r28","29":"r28","30":"r28","31":"r28"},"23":{"17":"r29","18":"r29","19":"r29","20":"r29","21":"r29","22":"r29","23":"r29","24":"r29","26":"r29","27":"r29","28":"r29","29":"r29","30":"r29","31":"r29"},"24":{"27":"r17","34":"r17"},"25":{"9":26,"10":19,"12":20,"13":21,"26":"r23","27":"s22","28":"r23","30":"s23","31":"r23"},"26":{"26":"r19","28":"r19"},"27":{"26":"r21","28":"r21"},"28":{"15":29,"16":30,"31":"r35","32":"r35","33":"s31"},"29":{"31":"s33","32":"s32"},"30":{"31":"r32","32":"r32","33":"s37"},"31":{"31":"r37","32":"r37","33":"r37"},"32":{"26":"r30","28":"r30"},"33":{"15":34,"16":30,"31":"r35","32":"r35","33":"s31"},"34":{"31":"s33","32":"s35"},"35":{"16":36,"31":"r34","32":"r34","33":"s31"},"36":{"31":"r33","32":"r33","33":"s37"},"37":{"31":"r36","32":"r36","33":"r36"},"38":{"26":"r22","28":"r22","31":"r22"},"39":{"26":"r26","27":"r26","28":"r26","29":"r26","30":"r26","31":"r26"},"40":{"13":41,"27":"s22","30":"s23"},"41":{"26":"r24","28":"r24","31":"r24"},"42":{"17":"r5","18":"r5","19":"r5","20":"r5","21":"r5","22":"r5","23":"r5","24":"r5"},"43":{"17":"r8","18":"r8","19":"r8","20":"r8","21":"r8","22":"r8","23":"r8","24":"r8"},"44":{"13":46,"17":"r9","18":"r9","19":"r9","20":"r9","21":"r9","22":"r9","23":"r9","24":"r9","27":"s22","30":"s23"},"45":{"17":"r13","18":"r13","19":"r13","20":"r13","21":"r13","22":"r13","23":"r13","24":"r13","27":"r13","30":"r13"},"46":{"17":"r14","18":"r14","19":"r14","20":"r14","21":"r14","22":"r14","23":"r14","24":"r14","27":"r14","30":"r14"},"47":{"13":46,"17":"r10","18":"r10","19":"r10","20":"r10","21":"r10","22":"r10","23":"r10","24":"r10","27":"s22","30":"s23"},"48":{"13":46,"17":"r11","18":"r11","19":"r11","20":"r11","21":"r11","22":"r11","23":"r11","24":"r11","27":"s22","30":"s23"},"49":{"13":46,"17":"r12","18":"r12","19":"r12","20":"r12","21":"r12","22":"r12","23":"r12","24":"r12","27":"s22","30":"s23"},"50":{"34":"acc"},"51":{"17":"r18","18":"r18","19":"r18","20":"r18","21":"r18","22":"r18","23":"r18","24":"r18","25":"r18"}};

const s = [];

let tokenizer;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

const lexRules = [[/^\/\/.*/, function() { /* skip comments */ }, ],
[/^\/\*(.|\s)*?\*\//, function() { /* skip comments */ }, ],
[/^\s+/, function() { /* skip whitespace */ }, ],
[/^%start\b/, function() { return '%start' }, ],
[/^%prec\b/, function() { return '%prec' }, ],
[/^%left\b/, function() { return '%left' }, ],
[/^%right\b/, function() { return '%right' }, ],
[/^%nonassoc\b/, function() { return '%nonassoc' }, ],
[/^%token/, function() { return '%token' }, ],
[/^\/\*(.|\n|\r)*?\*\//, function() { return 'CODE' }, ["action"]],
[/^\/\/.*/, function() { return 'CODE' }, ["action"]],
[/^\/[^ \/]*?['"{}'][^ ]*?\//, function() { return 'CODE' }, ["action"]],
[/^"(\\\\|\\"|[^"])*"/, function() { return 'CODE' }, ["action"]],
[/^'(\\\\|\\'|[^'])*'/, function() { return 'CODE' }, ["action"]],
[/^[\/"'][^{}\/"']+/, function() { return 'CODE' }, ["action"]],
[/^[^{}\/"']+/, function() { return 'CODE' }, ["action"]],
[/^\{/, function() { yy.depth++; return '{'; }, ["action"]],
[/^\}/, function() { if (yy.depth==0) this.popState(); else yy.depth--; return '}' }, ["action"]],
[/^[a-zA-Z][a-zA-Z0-9_\-']*/, function() { return 'ID' }, ],
[/^(?:->|:(:=)?)/, function() { return 'SPLITTER' }, ],
[/^;/, function() { return ';' }, ],
[/^\|/, function() { return '|' }, ],
[/^\{/, function() { yy.depth = 0; this.pushState('action'); return '{'; }, ],
[/^\}/, function() { return '}' }, ],
[/^%%/, function() { return '%%' }, ],
[/^%lex[\w\W]*?\/lex\b/, function() { yytext = yytext.slice(4, -4).trim(); return 'LEX_BLOCK' }, ],
[/^%\{(.|\r|\n)*?%\}/, function() { yytext = yytext.slice(2, -2).trim(); return 'MODULE_INCLUDE' }, ],
[/^\{\{[\w\W]*?\}\}/, function() { yytext = yytext.slice(2, -2); return 'CODE'; }, ],
[/^%[a-zA-Z]+[^\r\n]*/, function() { /* skip unrecognized options */ }, ],
[/^(?:"|')([^"']*)(?:"|')/, function() { return 'STRING' }, ]];
const lexRulesByConditions = {"*":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"INITIAL":[0,1,2,3,4,5,6,7,8,18,19,20,21,22,23,24,25,26,27,28,29],"action":[9,10,11,12,13,14,15,16,17]};

const EOF_TOKEN = {
  type: EOF,
  value: EOF,
};

tokenizer = {
  initString(string) {
    this._states = ['INITIAL'];
    this._string = string + EOF;
    this._cursor = 0;
    return this;
  },

  /**
   * Returns tokenizer states.
   */
  getStates() {
    return this._states;
  },

  getCurrentState() {
    return this._states[this._states.length - 1];
  },

  pushState(state) {
    this._states.push(state);
  },

  begin(state) {
    this.pushState(state);
  },

  popState() {
    if (this._states.length > 1) {
      return this._states.pop();
    }
    return this._states[0];
  },

  getNextToken() {
    if (!this.hasMoreTokens()) {
      return EOF_TOKEN;
    } else if (this.isEOF()) {
      this._cursor++;
      return EOF_TOKEN;
    }

    let string = this._string.slice(this._cursor);
    let lexRulesForState = lexRulesByConditions[this.getCurrentState()];

    for (let i = 0; i < lexRulesForState.length; i++) {
      let lexRuleIndex = lexRulesForState[i];
      let lexRule = lexRules[lexRuleIndex];

      let matched = this._match(string, lexRule[0]);
      if (matched) {
        yytext = matched;
        yyleng = yytext.length;
        let token = lexRule[1].call(this);

        if (!token) {
          return this.getNextToken();
        }

        return {
          type: token,
          value: yytext,
        };
      }
    }

    throw new Error(`Unexpected token: "${string[0]}".`);
  },

  isEOF() {
    return this._string[this._cursor] === EOF &&
      this._cursor === this._string.length - 1;
  },

  hasMoreTokens() {
    return this._cursor < this._string.length;
  },

  _match(string, regexp) {
    let matched = string.match(regexp);
    if (matched) {
      this._cursor += matched[0].length;
      return matched[0];
    }
    return null;
  },
};

const yyparse = {
  parse(string) {
    yyparse.onParseBegin(string);

    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    s.length = 0;
    s.push(0);

    let t = tokenizer.getNextToken();
    let st = null;

    do {
      if (!t) {
        unexpectedEndOfInput();
      }

      let sta = s[s.length - 1];
      let clm = tks[t.type];
      let e = tbl[sta][clm];

      if (!e) {
        unexpectedToken(t);
      }

      if (e[0] === 's') {
        s.push(
          {symbol: tks[t.type], semanticValue: t.value},
          Number(e.slice(1))
        );
        st = t;
        t = tokenizer.getNextToken();
      } else if (e[0] === 'r') {
        let pn = e.slice(1);
        let p = ps[pn];
        let hsa = typeof p[2] === 'function';
        let saa = hsa ? [] : null;

        if (p[1] !== 0) {
          let rhsl = p[1];
          while (rhsl--) {
            s.pop();
            let se = s.pop();

            if (hsa) {
              saa.unshift(se.semanticValue);
            }
          }
        }

        let rse = {symbol: p[0]};

        if (hsa) {
          yytext = st ? st.value : null;
          yyleng = st ? st.value.length : null;

          p[2](...saa);
          rse.semanticValue = __;
        }

        s.push(
          rse,
          tbl[s[s.length - 1]][p[0]]
        );
      } else if (e === 'acc') {
        s.pop();
        let parsed = s.pop();

        if (s.length !== 1 ||
            s[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          unexpectedToken(t);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          yyparse.onParseEnd(parsed.semanticValue);
          return parsed.semanticValue;
        }

        yyparse.onParseEnd();
        return true;
      }

    } while (tokenizer.hasMoreTokens() || s.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return yyparse;
  },

  getTokenizer() {
    return tokenizer;
  },

  onParseBegin(string) {},
  onParseEnd(parsed) {},
};


    let tokens;
    let operators;
    let extra;

    yyparse.onParseBegin = () => {
      tokens = [];
      operators = [];
      extra = {};
    };
  

function unexpectedToken(token) {
  if (token.value === EOF) {
    unexpectedEndOfInput();
  }
  parseError(`Unexpected token: ${token.value}.`);
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new Error(`Parse error: ${message}`);
}

module.exports = yyparse;
